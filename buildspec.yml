version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 12
      docker: 18
  pre_build:
    commands:
      - echo login into amazon ECR
      - aws --version
      # - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      # - $(aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI)
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      # - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      # - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    run-as: node
    commands:
      - echo Build started on `date`
      # - npm install
      # - npm run build:prod
      - echo Build the Docker image ...
      - ls -la
      - docker build -t $REPOSITORY_URI:rv1 .
      - echo tag docker image
      - docker tag $REPOSITORY_URI:rv1 $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images to ECR
      - echo "Build with $IMAGE_REPO_NAME, $REPOSITORY_URI, $IMAGE_TAG"
      - docker push $REPOSITORY_URI:rv1
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo write image definitions file ...
      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE_REPO_NAME $REPOSITORY_URI:$IMAGE_TAG > image_definitions.json
      - cat image_definitions.json
artifacts:
  files: image_definitions.json
#cache:
#  paths:
#    - 'node_modules/'
